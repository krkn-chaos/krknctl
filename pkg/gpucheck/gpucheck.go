// Package gpucheck provides simple platform-based GPU acceleration detection
// Generated by Claude Sonnet 4
package gpucheck

import (
	"context"
	"fmt"
	"github.com/krkn-chaos/krknctl/pkg/config"
	"os"
	"runtime"
)

// GPUAcceleration represents the type of GPU acceleration available
type GPUAcceleration string

const (
	GPUAccelerationAppleSilicon GPUAcceleration = "apple-silicon"
	GPUAccelerationNVIDIA       GPUAcceleration = "nvidia"
	GPUAccelerationGeneric      GPUAcceleration = "generic"
)

// PlatformGPUDetector provides platform-based GPU detection
type PlatformGPUDetector struct {
	config config.Config
}

// NewPlatformGPUDetector creates a new platform-based GPU detector
func NewPlatformGPUDetector(config config.Config) *PlatformGPUDetector {
	return &PlatformGPUDetector{
		config: config,
	}
}

// hasNVIDIADevices checks if NVIDIA block devices exist on the system
func (d *PlatformGPUDetector) hasNVIDIADevices() bool {
	// Check for essential NVIDIA device files
	nvidiaPaths := []string{
		"/dev/nvidia0",
		"/dev/nvidiactl",
		"/dev/nvidia-uvm",
	}
	
	// At least nvidia0 and nvidiactl should exist for a working NVIDIA setup
	hasNvidia0 := false
	hasNvidiaCtl := false
	
	for _, path := range nvidiaPaths {
		if _, err := os.Stat(path); err == nil {
			switch path {
			case "/dev/nvidia0":
				hasNvidia0 = true
			case "/dev/nvidiactl":
				hasNvidiaCtl = true
			}
		}
	}
	
	// Both essential devices must exist
	return hasNvidia0 && hasNvidiaCtl
}

// DetectGPUAcceleration detects GPU acceleration based on platform assumptions
func (d *PlatformGPUDetector) DetectGPUAcceleration(ctx context.Context, noGPU bool) GPUAcceleration {
	// If --no-gpu flag is set, always use generic CPU-only
	if noGPU {
		return GPUAccelerationGeneric
	}

	// Platform-based assumptions
	switch runtime.GOOS {
	case "darwin":
		// On macOS, check architecture
		if runtime.GOARCH == "arm64" {
			// Apple Silicon - assume GPU acceleration available
			// Note: If libkrun is not enabled in Podman VM, deployment will fail
			// and user should use --no-gpu flag
			return GPUAccelerationAppleSilicon
		}
		// Intel Mac - fallback to generic
		return GPUAccelerationGeneric
	case "linux":
		// On Linux, check if NVIDIA block devices exist physically
		if d.hasNVIDIADevices() {
			return GPUAccelerationNVIDIA
		}
		// No NVIDIA devices found - use generic CPU-only
		return GPUAccelerationGeneric
	default:
		// Other platforms - use generic CPU-only
		return GPUAccelerationGeneric
	}
}

// GetLightspeedImageURI returns the appropriate lightspeed container image for detected GPU type
func (d *PlatformGPUDetector) GetLightspeedImageURI(gpuType GPUAcceleration) (string, error) {
	switch gpuType {
	case GPUAccelerationAppleSilicon:
		return d.config.GetLightspeedImageURI("apple-silicon")
	case GPUAccelerationNVIDIA:
		return d.config.GetLightspeedImageURI("nvidia")
	case GPUAccelerationGeneric:
		return d.config.GetLightspeedImageURI("generic")
	default:
		return "", fmt.Errorf("unsupported GPU acceleration type: %s", gpuType)
	}
}

// GetDeviceMounts returns device mounts for GPU acceleration (empty for generic)
func (d *PlatformGPUDetector) GetDeviceMounts(gpuType GPUAcceleration) map[string]string {
	deviceMounts := make(map[string]string)

	switch gpuType {
	case GPUAccelerationAppleSilicon:
		// Apple Silicon uses DRI devices via libkrun
		deviceMounts["/dev/dri"] = "/dev/dri"
	case GPUAccelerationNVIDIA:
		// NVIDIA GPU devices
		deviceMounts["/dev/nvidia0"] = "/dev/nvidia0"
		deviceMounts["/dev/nvidiactl"] = "/dev/nvidiactl"
		deviceMounts["/dev/nvidia-uvm"] = "/dev/nvidia-uvm"
	case GPUAccelerationGeneric:
		// No device mounting for generic CPU-only mode
		// deviceMounts remains empty
	}

	return deviceMounts
}

// GetGPUDescription returns human-readable description of GPU acceleration type
func (d *PlatformGPUDetector) GetGPUDescription(gpuType GPUAcceleration) string {
	switch gpuType {
	case GPUAccelerationAppleSilicon:
		return "Apple Silicon GPU (M1, M2, M3, M4 with Metal via libkrun)"
	case GPUAccelerationNVIDIA:
		return "NVIDIA GPU (CUDA acceleration)"
	case GPUAccelerationGeneric:
		return "CPU-only (no GPU acceleration)"
	default:
		return fmt.Sprintf("Unknown GPU type: %s", gpuType)
	}
}

// AutoSelectLightspeedConfig automatically selects the best lightspeed configuration
func (d *PlatformGPUDetector) AutoSelectLightspeedConfig(ctx context.Context, noGPU bool) (string, GPUAcceleration, map[string]string, error) {
	// Detect GPU acceleration type
	gpuType := d.DetectGPUAcceleration(ctx, noGPU)
	
	// Get appropriate container image
	imageURI, err := d.GetLightspeedImageURI(gpuType)
	if err != nil {
		return "", "", nil, fmt.Errorf("failed to get lightspeed image for %s: %w", gpuType, err)
	}
	
	// Get device mounts
	deviceMounts := d.GetDeviceMounts(gpuType)
	
	return imageURI, gpuType, deviceMounts, nil
}

// HandleContainerError analyzes container deployment errors and provides helpful suggestions
func (d *PlatformGPUDetector) HandleContainerError(err error, gpuType GPUAcceleration) error {
	if err == nil {
		return nil
	}

	// Check if this is a GPU-related deployment error
	errStr := err.Error()
	
	// Common patterns for GPU/device mounting failures
	isDeviceError := false
	if containsAny(errStr, []string{
		"/dev/dri",
		"/dev/nvidia",
		"device",
		"no such file or directory",
		"operation not permitted",
		"permission denied",
	}) {
		isDeviceError = true
	}

	if !isDeviceError {
		// Not a device-related error, return as-is
		return err
	}

	// Provide platform-specific suggestions for device errors
	switch gpuType {
	case GPUAccelerationAppleSilicon:
		if runtime.GOOS == "darwin" {
			return fmt.Errorf("%w\n\nðŸ’¡ GPU acceleration failed on macOS. This usually means GPU support is not enabled in your Podman machine.\n\nTo fix this:\n1. Enable GPU support in Podman: see https://podman-desktop.io/docs/podman/gpu\n2. Or use CPU-only mode: add --no-gpu flag to your command", err)
		}
	case GPUAccelerationNVIDIA:
		return fmt.Errorf("%w\n\nðŸ’¡ NVIDIA GPU acceleration failed. This usually means GPU support is not properly configured.\n\nTo fix this:\n1. Configure GPU support: see https://podman-desktop.io/docs/podman/gpu\n2. Or use CPU-only mode: add --no-gpu flag to your command", err)
	}
	
	// Generic device error
	return fmt.Errorf("%w\n\nðŸ’¡ GPU device mounting failed. Try using --no-gpu flag for CPU-only mode", err)
}

// containsAny checks if a string contains any of the provided substrings
func containsAny(str string, substrings []string) bool {
	for _, substr := range substrings {
		if len(str) >= len(substr) {
			for i := 0; i <= len(str)-len(substr); i++ {
				if str[i:i+len(substr)] == substr {
					return true
				}
			}
		}
	}
	return false
}