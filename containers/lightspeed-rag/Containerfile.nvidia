# Generated by Claude Sonnet 4
# krknctl Lightspeed RAG Container - NVIDIA GPU optimized (x86_64) - Size-optimized build
FROM registry.fedoraproject.org/fedora-minimal:42 AS builder

# Install build dependencies
RUN microdnf -y install \
    python3 \
    python3-pip \
    python3-devel \
    curl \
    bash \
    git \
    gcc \
    gcc-c++ \
    && microdnf clean all

# Set working directory
WORKDIR /app

# Create and activate virtual environment with --system-site-packages to reduce duplication
RUN python3 -m venv --system-site-packages /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install only core requirements (exclude heavy dependencies for now)
RUN git clone https://github.com/krkn-chaos/krkn-lightspeed.git /tmp/krkn-lightspeed && \
    cd /tmp/krkn-lightspeed && \
    git checkout krknctl_lightspeed && \
    /app/venv/bin/pip install --no-cache-dir --no-deps fastapi uvicorn && \
    /app/venv/bin/pip install --no-cache-dir --no-deps requests pydantic chromadb && \
    rm -rf /tmp/krkn-lightspeed

# Install lightweight PyTorch CUDA (runtime only, no dev tools)
RUN /app/venv/bin/pip install --no-cache-dir --force-reinstall --no-deps \
    torch --extra-index-url https://download.pytorch.org/whl/cu118

# Install minimal llama-cpp-python with CUDA support (compile from source for smaller size)
RUN CMAKE_ARGS="-DGGML_CUDA=on -DCUDA_PATH=/usr/local/cuda" \
    /app/venv/bin/pip install --no-cache-dir --no-build-isolation llama-cpp-python

# Install only essential sentence-transformers components
RUN /app/venv/bin/pip install --no-cache-dir --no-deps sentence-transformers transformers tokenizers safetensors

# Download LLM model (3B for better performance)
RUN mkdir -p /app/models && \
    /app/venv/bin/python -c "import huggingface_hub; huggingface_hub.hf_hub_download(repo_id='bartowski/Llama-3.2-3B-Instruct-GGUF', filename='Llama-3.2-3B-Instruct-Q4_K_M.gguf', local_dir='/app/models', local_dir_use_symlinks=False)" && \
    ls -la /app/models/ && \
    [ $(stat -c%s /app/models/Llama-3.2-3B-Instruct-Q4_K_M.gguf) -gt 1500000000 ] || (echo "Model download failed - file too small" && exit 1)

# Download only essential embedding model (lighter than Qwen)
RUN mkdir -p /root/.cache/huggingface/transformers && \
    /app/venv/bin/python -c "from sentence_transformers import SentenceTransformer; model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')"

# Aggressive cleanup of virtual environment
RUN find /app/venv -name "*.pyc" -delete && \
    find /app/venv -name "__pycache__" -type d -exec rm -rf {} + && \
    find /app/venv -name "*.pyo" -delete && \
    find /app/venv -name "*.egg-info" -type d -exec rm -rf {} + && \
    find /app/venv -name "tests" -type d -exec rm -rf {} + && \
    find /app/venv -name "test" -type d -exec rm -rf {} + && \
    find /app/venv -name "*.dist-info" -type d -exec rm -rf {} + && \
    rm -rf /app/venv/lib/python*/site-packages/torch/test && \
    rm -rf /app/venv/lib/python*/site-packages/torch/share && \
    rm -rf /app/venv/lib/python*/site-packages/torch/bin && \
    rm -rf /app/venv/lib/python*/site-packages/transformers/tests && \
    rm -rf /app/venv/lib/python*/site-packages/scipy/*/tests && \
    rm -rf /tmp/* /root/.cache/pip

# Copy krknctl help and prebuild script
COPY krknctl_help.txt .
COPY prebuild_chromadb.py .

# Pre-build ChromaDB with minimal documentation
RUN git clone https://github.com/krkn-chaos/krkn-lightspeed.git /tmp/krkn-lightspeed-build && \
    cd /tmp/krkn-lightspeed-build && \
    git checkout krknctl_lightspeed && \
    cp -r /tmp/krkn-lightspeed-build /app/krkn-lightspeed && \
    /app/venv/bin/python /app/prebuild_chromadb.py && \
    rm -rf /tmp/krkn-lightspeed-build && \
    echo "ChromaDB pre-build completed"

#############################################
# Ultra-minimal runtime stage
#############################################
FROM registry.fedoraproject.org/fedora-minimal:42 AS runtime

# Install only essential runtime packages in single layer
RUN microdnf -y install python3 bash curl git && \
    microdnf clean all && \
    rm -rf /var/cache/dnf

WORKDIR /app

# Copy only essential virtual environment files
COPY --from=builder /app/venv/lib/python*/site-packages/ /app/venv/lib/python3.12/site-packages/
COPY --from=builder /app/venv/bin/ /app/venv/bin/

# Copy application files
COPY --from=builder /app/models/ /app/models/
COPY --from=builder /app/krknctl_help.txt /app/krknctl_help.txt
COPY --from=builder /root/.cache/huggingface/ /root/.cache/huggingface/
COPY --from=builder /app/docs_index/ /app/docs_index/

# Set environment
ENV PATH="/app/venv/bin:$PATH" \
    VIRTUAL_ENV="/app/venv" \
    PYTHONPATH="/app/venv/lib/python3.12/site-packages" \
    CUDA_VISIBLE_DEVICES=0 \
    TORCH_USE_CUDA_DSA=1 \
    PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:128

RUN mkdir -p /app/cached_docs

COPY entrypoint.sh .
RUN chmod +x entrypoint.sh

# Expose port for FastAPI service
EXPOSE 8080

# Set environment variables
ENV PYTHONUNBUFFERED=1

# CACHE INVALIDATION POINT: Change this ARG to force fresh code checkout
ARG CODE_VERSION=latest
RUN echo "Building with code version: $CODE_VERSION"

# Fresh clone of krkn-lightspeed repository (this layer will be invalidated when CODE_VERSION changes)
RUN git clone https://github.com/krkn-chaos/krkn-lightspeed.git /app/krkn-lightspeed && \
    cd /app/krkn-lightspeed && \
    git checkout krknctl_lightspeed && \
    echo "Repository cloned and checked out successfully at version: $CODE_VERSION"

# Run the entrypoint script
ENTRYPOINT ["./entrypoint.sh"]