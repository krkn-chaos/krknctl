# Generated by Claude Sonnet 4
# krknctl Lightspeed RAG Container - Generic CPU-only (cross-platform)
FROM registry.fedoraproject.org/fedora-minimal:42 AS builder

# Install build dependencies
RUN microdnf -y install \
    python3 \
    python3-pip \
    python3-devel \
    curl \
    bash \
    git \
    wget \
    which \
    gcc \
    gcc-c++ \
    cmake \
    make \
    && microdnf clean all

# Set working directory
WORKDIR /app

# Create and activate virtual environment
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Clone krkn-lightspeed repository to get requirements_krknctl.txt
RUN git clone https://github.com/krkn-chaos/krkn-lightspeed.git /tmp/krkn-lightspeed && \
    cd /tmp/krkn-lightspeed && \
    git checkout krknctl_lightspeed_light && \
    echo "krkn-lightspeed repository cloned successfully"

# Clone krkn-hub repository to get scenario definitions
RUN git clone https://github.com/krkn-chaos/krkn-hub.git /tmp/krkn-hub && \
    echo "krkn-hub repository cloned successfully"

# Install dependencies from requirements_krknctl.txt
RUN /app/venv/bin/pip install --no-cache-dir -r /tmp/krkn-lightspeed/requirements_krknctl.txt

# Install llama-cpp-python (standard CPU-only version from PyPI)
RUN /app/venv/bin/pip install --no-cache-dir llama-cpp-python

# Install huggingface-hub for reliable model downloads
RUN /app/venv/bin/pip install --no-cache-dir huggingface-hub

# Careful cleanup: remove pip cache and unnecessary files but preserve numpy core tests
RUN find /app/venv -name "*.pyc" -delete && \
    find /app/venv -name "__pycache__" -delete && \
    find /app/venv -name "*.pyo" -delete && \
    find /app/venv -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true && \
    rm -rf /app/venv/lib/python*/site-packages/torch/test && \
    rm -rf /app/venv/lib/python*/site-packages/torch/share && \
    rm -rf /app/venv/lib/python*/site-packages/transformers/tests && \
    rm -rf /app/venv/lib/python*/site-packages/sklearn/tests && \
    rm -rf /app/venv/lib/python*/site-packages/scipy/*/tests && \
    rm -rf /tmp/* 2>/dev/null || true

# Verify that numpy and sentence-transformers work correctly after cleanup
RUN /app/venv/bin/python -c "import numpy; print(f'numpy version: {numpy.__version__}')" && \
    /app/venv/bin/python -c "import sentence_transformers; print(f'sentence-transformers version: {sentence_transformers.__version__}')"

# Download LLM and embedding models in builder stage (3B model for better performance)
RUN mkdir -p /app/models && \
    /app/venv/bin/python -c "import huggingface_hub; huggingface_hub.hf_hub_download(repo_id='bartowski/Llama-3.2-3B-Instruct-GGUF', filename='Llama-3.2-3B-Instruct-Q4_K_M.gguf', local_dir='/app/models', local_dir_use_symlinks=False)" && \
    ls -la /app/models/ && \
    [ $(stat -c%s /app/models/Llama-3.2-3B-Instruct-Q4_K_M.gguf) -gt 1500000000 ] || (echo "Model download failed - file too small" && exit 1)

# Pre-download embedding models to avoid runtime downloads
RUN mkdir -p /root/.cache/huggingface/transformers && \
    /app/venv/bin/python -c "from sentence_transformers import SentenceTransformer; print('Downloading Qwen embedding model...'); model = SentenceTransformer('Qwen/Qwen3-Embedding-0.6B'); print('Qwen model cached successfully'); print('Downloading fallback embedding model...'); fallback = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2'); print('Fallback model cached successfully')" && \
    echo "Embedding models pre-downloaded successfully"

# Copy application files from repository (NEW IMPLEMENTATION)
RUN cp /tmp/krkn-lightspeed/rag_pipelines/llama31_krknctl_rag_pipeline.py /app/ && \
    cp /tmp/krkn-lightspeed/fastapi_app.py /app/ && \
    cp -r /tmp/krkn-lightspeed/utils /app/ && \
    echo "New FAISS implementation files copied successfully"

# Copy krknctl help and entrypoint
COPY krknctl_help.txt .
COPY entrypoint.sh .

# Make scripts executable
RUN chmod +x entrypoint.sh

# Create directories for new implementation
RUN mkdir -p /app/cached_docs /app/docs_index /app/faiss_index /app/rag_pipelines

# Copy pipeline file to correct location
RUN cp /app/llama31_krknctl_rag_pipeline.py /app/rag_pipelines/ && \
    rm -rf /tmp/krkn-lightspeed /tmp/krkn-hub

#############################################
# Runtime stage - minimal runtime dependencies
#############################################
FROM registry.fedoraproject.org/fedora-minimal:42 AS runtime

# Install only runtime dependencies (no GPU libraries)
RUN microdnf -y install \
    python3 \
    bash \
    curl \
    && microdnf clean all

# Set working directory
WORKDIR /app

# Copy the complete virtual environment from builder
COPY --from=builder /app/venv/ /app/venv/

# Activate virtual environment for all subsequent commands
ENV PATH="/app/venv/bin:$PATH"
ENV VIRTUAL_ENV="/app/venv"

# Copy models and cached data
COPY --from=builder /app/models/ /app/models/
COPY --from=builder /app/krknctl_help.txt /app/krknctl_help.txt
COPY --from=builder /root/.cache/huggingface/ /root/.cache/huggingface/

# Copy application files
COPY --from=builder /app/rag_pipelines/ /app/rag_pipelines/
COPY --from=builder /app/fastapi_app.py /app/
COPY --from=builder /app/utils/ /app/utils/

# Create directories for indices
RUN mkdir -p /app/docs_index /app/cached_docs /app/rag_pipelines

# Copy startup script
COPY --from=builder /app/entrypoint.sh /app/entrypoint.sh

# Make scripts executable
RUN chmod +x entrypoint.sh

# Install git in runtime stage for documentation indexing
RUN microdnf -y install git && microdnf clean all

# Expose port for FastAPI service
EXPOSE 8080

# Set environment variables
ENV PYTHONUNBUFFERED=1

# Set CPU optimization environment variables
ENV OMP_NUM_THREADS=4
ENV MKL_NUM_THREADS=4

# CACHE INVALIDATION POINT: Change this ARG to force fresh code checkout
ARG CODE_VERSION=latest
RUN echo "Building with code version: $CODE_VERSION"

# Fresh clone of krkn-lightspeed repository (this layer will be invalidated when CODE_VERSION changes)
RUN rm -rf /app/rag_pipelines /app/fastapi_app.py /app/utils && \
    mkdir -p /app/rag_pipelines && \
    git clone https://github.com/krkn-chaos/krkn-lightspeed.git /tmp/krkn-lightspeed-fresh && \
    cd /tmp/krkn-lightspeed-fresh && \
    git checkout krknctl_lightspeed_light && \
    cp /tmp/krkn-lightspeed-fresh/rag_pipelines/llama31_krknctl_rag_pipeline.py /app/rag_pipelines/ && \
    cp /tmp/krkn-lightspeed-fresh/fastapi_app.py /app/ && \
    cp -r /tmp/krkn-lightspeed-fresh/utils /app/ && \
    rm -rf /tmp/krkn-lightspeed-fresh && \
    echo "Fresh krkn-lightspeed code updated successfully at version: $CODE_VERSION"

# Fresh clone of krkn-hub repository for scenario definitions
RUN git clone https://github.com/krkn-chaos/krkn-hub.git /tmp/krkn-hub-fresh && \
    echo "Fresh krkn-hub scenarios available for indexing at version: $CODE_VERSION" && \
    rm -rf /tmp/krkn-hub-fresh

# Run the entrypoint script
ENTRYPOINT ["./entrypoint.sh"]