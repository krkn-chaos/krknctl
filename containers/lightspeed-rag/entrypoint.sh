#!/bin/bash
# Generated by Claude Code
# Entrypoint script for krknctl Lightspeed RAG container with FAISS + llama.cpp

set -e

echo "Starting krknctl Lightspeed RAG service..."

# Create /dev/dri structure if GPU devices are mapped to different paths
if [ -c "/dev/card0" ] && [ -c "/dev/renderD128" ]; then
    echo "Creating /dev/dri structure for GPU access..."
    mkdir -p /dev/dri
    ln -sf /dev/card0 /dev/dri/card0
    ln -sf /dev/renderD128 /dev/dri/renderD128
    ls -la /dev/dri/
fi

# Verify the model is available (should be pre-downloaded)
echo "Verifying Llama 3.2 3B model..."
MODEL_PATH="/app/models/Llama-3.2-3B-Instruct-Q4_K_M.gguf"
if [ ! -f "$MODEL_PATH" ]; then
    echo "WARNING: Model not found at $MODEL_PATH"
    echo "Service will attempt to download it on first use"
else
    echo "Model verified: $(basename $MODEL_PATH)"
fi

# Set environment variables for the RAG service
export MODEL_PATH="$MODEL_PATH"
export CONTAINER_ENV="true"
export PYTHONPATH="/app:$PYTHONPATH"

# Stay in /app directory (where our files are)
cd /app

# Check if we have the new implementation files
if [ -f "/app/fastapi_app.py" ]; then
    echo "Using new FAISS + llama.cpp implementation"

    # Check if FAISS index exists, if not build it
    if [ ! -d "/app/faiss_index" ] && [ ! -d "/app/docs_index" ]; then
        echo "Building documentation index..."
        python3 -c "
from utils.faiss_document_indexer import FaissDocumentIndexer
indexer = FaissDocumentIndexer('/app')
indexer.build_and_save_index(
    'https://github.com/krkn-chaos/website',
    'content/en/docs',
    '/app/faiss_index',
    'https://github.com/krkn-chaos/krkn-hub'
)
print('Index built successfully')
" || echo "Index building failed, will build on first request"
    fi

    # Start the FastAPI server
    echo "Starting FAISS + llama.cpp FastAPI service on port 8080..."
    exec python3 fastapi_app.py

else
    echo "ERROR: FastAPI application not found!"
    echo "Available files in /app:"
    ls -la /app/
    exit 1
fi
