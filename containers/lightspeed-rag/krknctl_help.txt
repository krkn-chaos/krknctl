# krknctl Help Documentation
# Generated by Claude Code
# This file contains krknctl command documentation for RAG indexing

## krknctl - Chaos Engineering CLI Tool

krknctl is a command-line tool for running chaos engineering scenarios using the krkn framework.

### Main Commands

#### krknctl run
Run chaos engineering scenarios.

Usage: krknctl run [scenario-name] [flags]

Examples:
- krknctl run pod-delete-scenario
- krknctl run node-cpu-hog --kubeconfig=/path/to/config
- krknctl run litmus-pod-delete --private-registry=my-registry.com

Flags:
--kubeconfig string        Path to kubeconfig file
--private-registry string  Private registry URL
--private-registry-username string  Username for private registry
--private-registry-password string  Password for private registry
--detach                   Run scenario in detached mode

#### krknctl list
List available chaos scenarios.

Usage: krknctl list [flags]

Examples:
- krknctl list
- krknctl list --private-registry=my-registry.com

Flags:
--private-registry string  Private registry URL
--kubeconfig string        Path to kubeconfig file

#### krknctl describe
Describe a specific chaos scenario.

Usage: krknctl describe [scenario-name] [flags]

Examples:
- krknctl describe pod-delete-scenario
- krknctl describe node-cpu-hog --private-registry=my-registry.com

#### krknctl clean
Clean up chaos engineering containers and resources.

Usage: krknctl clean [flags]

Examples:
- krknctl clean
- krknctl clean --all

Flags:
--all  Clean all krknctl resources

#### krknctl lightspeed
AI-powered chaos engineering assistance (requires GPU support).

Usage: krknctl lightspeed [command] [flags]

Subcommands:
- krknctl lightspeed check --gpu-nvidia    Check NVIDIA GPU support
- krknctl lightspeed check --gpu-amd       Check AMD GPU support  
- krknctl lightspeed check --gpu-intel     Check Intel GPU support
- krknctl lightspeed check --gpu-apple-silicon  Check Apple Silicon GPU support
- krknctl lightspeed run                   Run AI-powered assistance

Flags:
--no-gpu          Force CPU-only mode (disable GPU acceleration)
--private-registry-lightspeed string  Private registry for lightspeed images

#### krknctl graph
Manage chaos scenario dependency graphs.

Usage: krknctl graph [command] [flags]

Subcommands:
- krknctl graph run [graph-file]     Run scenarios from dependency graph
- krknctl graph scaffold [name]      Create new graph template
- krknctl graph validate [graph-file] Validate graph file

#### krknctl random
Generate and run random chaos scenarios.

Usage: krknctl random [flags]

Examples:
- krknctl random --scenarios=5
- krknctl random --parallelism=2 --seed-file=chaos-seed.json

Flags:
--scenarios int      Number of scenarios to run
--parallelism int    Maximum parallel scenarios
--seed-file string   Seed file for scenario templates

### Global Flags

--help              Show help information
--version           Show version information
--verbose           Enable verbose logging
--config string     Path to configuration file

### Common Scenario Types

#### Pod Scenarios
- pod-delete-scenario: Delete random pods
- pod-cpu-hog-scenario: Create CPU stress on pods
- pod-memory-hog-scenario: Create memory stress on pods
- pod-io-hog-scenario: Create I/O stress on pods
- pod-network-chaos-scenario: Disrupt pod networking

#### Node Scenarios  
- node-cpu-hog-scenario: Create CPU stress on nodes
- node-memory-hog-scenario: Create memory stress on nodes
- node-io-hog-scenario: Create I/O stress on nodes
- node-reboot-scenario: Reboot random nodes
- node-stop-scenario: Stop random nodes

#### Application Scenarios
- application-outage-scenario: Simulate application outages
- service-hijack-scenario: Hijack service traffic
- container-scenario: Container-level chaos

#### Zone/Cloud Scenarios
- zone-outage-scenario: Simulate availability zone outages
- cloud-outage-scenario: Simulate cloud provider outages

#### Litmus Scenarios
Integration with Litmus chaos experiments:
- litmus-pod-delete: Litmus pod deletion experiment
- litmus-container-kill: Litmus container kill experiment
- litmus-disk-fill: Litmus disk fill experiment

### Configuration

krknctl uses configuration files and environment variables:

#### Environment Variables
- KRKNCTL_PRIVATE_REGISTRY: Default private registry
- KRKNCTL_PRIVATE_REGISTRY_USERNAME: Registry username
- KRKNCTL_PRIVATE_REGISTRY_PASSWORD: Registry password
- KRKNCTL_KUBECONFIG: Default kubeconfig path

#### Configuration File
Default location: ~/.krknctl/config.yaml

Example:
```yaml
private_registry: "my-registry.com"
kubeconfig: "/path/to/kubeconfig"
default_scenarios:
  - pod-delete-scenario
  - node-cpu-hog-scenario
```

### Troubleshooting

#### Common Issues

1. **GPU Check Fails**
   - Ensure Podman is installed (Docker not supported for GPU features)
   - Check GPU drivers are properly installed
   - Use appropriate GPU flag (--gpu-nvidia, --gpu-amd, etc.)

2. **Private Registry Authentication**
   - Set KRKNCTL_PRIVATE_REGISTRY_USERNAME and KRKNCTL_PRIVATE_REGISTRY_PASSWORD
   - Use --private-registry flag with registry URL
   - Ensure registry supports token authentication

3. **Kubeconfig Issues**
   - Use --kubeconfig flag to specify path
   - Ensure kubeconfig is valid and accessible
   - Check cluster connectivity

4. **Scenario Not Found**
   - Use 'krknctl list' to see available scenarios
   - Check private registry configuration
   - Verify scenario name spelling

5. **Container Runtime Issues**
   - Ensure Podman or Docker is installed and running
   - Check container runtime permissions
   - For GPU features, use Podman with GPU support

### Examples

#### Basic Usage
```bash
# List available scenarios
krknctl list

# Describe a scenario
krknctl describe pod-delete-scenario

# Run a simple scenario
krknctl run pod-delete-scenario

# Run with custom kubeconfig
krknctl run node-cpu-hog --kubeconfig=/path/to/config
```

#### Private Registry Usage
```bash
# List scenarios from private registry
krknctl list --private-registry=my-registry.com

# Run scenario from private registry
krknctl run custom-scenario --private-registry=my-registry.com \
  --private-registry-username=user --private-registry-password=pass
```

#### GPU/Lightspeed Usage
```bash
# Check GPU support
krknctl lightspeed check --gpu-nvidia

# Run Lightspeed service (requires GPU)
krknctl lightspeed run

# Force CPU-only mode (no GPU acceleration)
krknctl lightspeed run --no-gpu
```

#### Graph Workflows
```bash
# Create new graph
krknctl graph scaffold chaos-workflow

# Run graph workflow
krknctl graph run chaos-workflow.json

# Validate graph
krknctl graph validate chaos-workflow.json
```

#### Random Chaos
```bash
# Run 3 random scenarios
krknctl random --scenarios=3

# Run with parallelism
krknctl random --scenarios=5 --parallelism=2

# Use seed file for consistent randomness
krknctl random --seed-file=chaos-seed.json
```